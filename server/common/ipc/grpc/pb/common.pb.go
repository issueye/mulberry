// 指定proto版本

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.33.0
// 	protoc        v5.27.2
// source: common.proto

// 指定默认包名

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type TaskStatus int32

const (
	TaskStatus_Unstarted TaskStatus = 0 // 未启动
	TaskStatus_Running   TaskStatus = 1 // 运行中
	TaskStatus_Stopped   TaskStatus = 2 // 已停止
)

// Enum value maps for TaskStatus.
var (
	TaskStatus_name = map[int32]string{
		0: "Unstarted",
		1: "Running",
		2: "Stopped",
	}
	TaskStatus_value = map[string]int32{
		"Unstarted": 0,
		"Running":   1,
		"Stopped":   2,
	}
)

func (x TaskStatus) Enum() *TaskStatus {
	p := new(TaskStatus)
	*p = x
	return p
}

func (x TaskStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (TaskStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_common_proto_enumTypes[0].Descriptor()
}

func (TaskStatus) Type() protoreflect.EnumType {
	return &file_common_proto_enumTypes[0]
}

func (x TaskStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use TaskStatus.Descriptor instead.
func (TaskStatus) EnumDescriptor() ([]byte, []int) {
	return file_common_proto_rawDescGZIP(), []int{0}
}

type RES_CODE int32

const (
	RES_CODE_SUCCESS RES_CODE = 0 // 成功
	RES_CODE_FAILED  RES_CODE = 1 // 失败
)

// Enum value maps for RES_CODE.
var (
	RES_CODE_name = map[int32]string{
		0: "SUCCESS",
		1: "FAILED",
	}
	RES_CODE_value = map[string]int32{
		"SUCCESS": 0,
		"FAILED":  1,
	}
)

func (x RES_CODE) Enum() *RES_CODE {
	p := new(RES_CODE)
	*p = x
	return p
}

func (x RES_CODE) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (RES_CODE) Descriptor() protoreflect.EnumDescriptor {
	return file_common_proto_enumTypes[1].Descriptor()
}

func (RES_CODE) Type() protoreflect.EnumType {
	return &file_common_proto_enumTypes[1]
}

func (x RES_CODE) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use RES_CODE.Descriptor instead.
func (RES_CODE) EnumDescriptor() ([]byte, []int) {
	return file_common_proto_rawDescGZIP(), []int{1}
}

type CommandType int32

const (
	CommandType_Start CommandType = 0 // 启动
	CommandType_Stop  CommandType = 1 // 停止
	CommandType_Run   CommandType = 2 // 运行
)

// Enum value maps for CommandType.
var (
	CommandType_name = map[int32]string{
		0: "Start",
		1: "Stop",
		2: "Run",
	}
	CommandType_value = map[string]int32{
		"Start": 0,
		"Stop":  1,
		"Run":   2,
	}
)

func (x CommandType) Enum() *CommandType {
	p := new(CommandType)
	*p = x
	return p
}

func (x CommandType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CommandType) Descriptor() protoreflect.EnumDescriptor {
	return file_common_proto_enumTypes[2].Descriptor()
}

func (CommandType) Type() protoreflect.EnumType {
	return &file_common_proto_enumTypes[2]
}

func (x CommandType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use CommandType.Descriptor instead.
func (CommandType) EnumDescriptor() ([]byte, []int) {
	return file_common_proto_rawDescGZIP(), []int{2}
}

type Empty struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *Empty) Reset() {
	*x = Empty{}
	if protoimpl.UnsafeEnabled {
		mi := &file_common_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Empty) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Empty) ProtoMessage() {}

func (x *Empty) ProtoReflect() protoreflect.Message {
	mi := &file_common_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Empty.ProtoReflect.Descriptor instead.
func (*Empty) Descriptor() ([]byte, []int) {
	return file_common_proto_rawDescGZIP(), []int{0}
}

// 插件信息
type InfoRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Version   string `protobuf:"bytes,1,opt,name=version,proto3" json:"version,omitempty"`     // 版本号
	AppName   string `protobuf:"bytes,2,opt,name=appName,proto3" json:"appName,omitempty"`     // 程序名称
	BuildTime string `protobuf:"bytes,3,opt,name=buildTime,proto3" json:"buildTime,omitempty"` // 构建时间
	ClientID  string `protobuf:"bytes,4,opt,name=clientID,proto3" json:"clientID,omitempty"`   // 客户端ID
}

func (x *InfoRequest) Reset() {
	*x = InfoRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_common_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InfoRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InfoRequest) ProtoMessage() {}

func (x *InfoRequest) ProtoReflect() protoreflect.Message {
	mi := &file_common_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InfoRequest.ProtoReflect.Descriptor instead.
func (*InfoRequest) Descriptor() ([]byte, []int) {
	return file_common_proto_rawDescGZIP(), []int{1}
}

func (x *InfoRequest) GetVersion() string {
	if x != nil {
		return x.Version
	}
	return ""
}

func (x *InfoRequest) GetAppName() string {
	if x != nil {
		return x.AppName
	}
	return ""
}

func (x *InfoRequest) GetBuildTime() string {
	if x != nil {
		return x.BuildTime
	}
	return ""
}

func (x *InfoRequest) GetClientID() string {
	if x != nil {
		return x.ClientID
	}
	return ""
}

type ClientRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ClientID string `protobuf:"bytes,2,opt,name=clientID,proto3" json:"clientID,omitempty"` // 客户端ID
}

func (x *ClientRequest) Reset() {
	*x = ClientRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_common_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ClientRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ClientRequest) ProtoMessage() {}

func (x *ClientRequest) ProtoReflect() protoreflect.Message {
	mi := &file_common_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ClientRequest.ProtoReflect.Descriptor instead.
func (*ClientRequest) Descriptor() ([]byte, []int) {
	return file_common_proto_rawDescGZIP(), []int{2}
}

func (x *ClientRequest) GetClientID() string {
	if x != nil {
		return x.ClientID
	}
	return ""
}

// 网络检查
type PublicResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Message   string `protobuf:"bytes,1,opt,name=message,proto3" json:"message,omitempty"`      // 返回消息
	Timestamp int64  `protobuf:"varint,2,opt,name=timestamp,proto3" json:"timestamp,omitempty"` // 时间戳 返回当前服务的时间戳
	RootPath  string `protobuf:"bytes,3,opt,name=rootPath,proto3" json:"rootPath,omitempty"`    // 根路径
}

func (x *PublicResponse) Reset() {
	*x = PublicResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_common_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PublicResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PublicResponse) ProtoMessage() {}

func (x *PublicResponse) ProtoReflect() protoreflect.Message {
	mi := &file_common_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PublicResponse.ProtoReflect.Descriptor instead.
func (*PublicResponse) Descriptor() ([]byte, []int) {
	return file_common_proto_rawDescGZIP(), []int{3}
}

func (x *PublicResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *PublicResponse) GetTimestamp() int64 {
	if x != nil {
		return x.Timestamp
	}
	return 0
}

func (x *PublicResponse) GetRootPath() string {
	if x != nil {
		return x.RootPath
	}
	return ""
}

// 心跳检测
type HeartbeatRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name        string  `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`                 // 名称
	ClientID    string  `protobuf:"bytes,2,opt,name=clientID,proto3" json:"clientID,omitempty"`         // 客户端ID
	Message     string  `protobuf:"bytes,3,opt,name=message,proto3" json:"message,omitempty"`           // 返回消息
	Timestamp   int64   `protobuf:"varint,4,opt,name=timestamp,proto3" json:"timestamp,omitempty"`      // 时间戳
	MemoryUsage float32 `protobuf:"fixed32,5,opt,name=memoryUsage,proto3" json:"memoryUsage,omitempty"` // 内存使用情况
	CpuUsage    float32 `protobuf:"fixed32,6,opt,name=cpuUsage,proto3" json:"cpuUsage,omitempty"`       // CPU使用情况
}

func (x *HeartbeatRequest) Reset() {
	*x = HeartbeatRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_common_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HeartbeatRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HeartbeatRequest) ProtoMessage() {}

func (x *HeartbeatRequest) ProtoReflect() protoreflect.Message {
	mi := &file_common_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HeartbeatRequest.ProtoReflect.Descriptor instead.
func (*HeartbeatRequest) Descriptor() ([]byte, []int) {
	return file_common_proto_rawDescGZIP(), []int{4}
}

func (x *HeartbeatRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *HeartbeatRequest) GetClientID() string {
	if x != nil {
		return x.ClientID
	}
	return ""
}

func (x *HeartbeatRequest) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *HeartbeatRequest) GetTimestamp() int64 {
	if x != nil {
		return x.Timestamp
	}
	return 0
}

func (x *HeartbeatRequest) GetMemoryUsage() float32 {
	if x != nil {
		return x.MemoryUsage
	}
	return 0
}

func (x *HeartbeatRequest) GetCpuUsage() float32 {
	if x != nil {
		return x.CpuUsage
	}
	return 0
}

// 状态返回
type StatusResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status string `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"` // 状态
}

func (x *StatusResponse) Reset() {
	*x = StatusResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_common_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StatusResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StatusResponse) ProtoMessage() {}

func (x *StatusResponse) ProtoReflect() protoreflect.Message {
	mi := &file_common_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StatusResponse.ProtoReflect.Descriptor instead.
func (*StatusResponse) Descriptor() ([]byte, []int) {
	return file_common_proto_rawDescGZIP(), []int{5}
}

func (x *StatusResponse) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

type TaskListRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ClientID string `protobuf:"bytes,1,opt,name=clientID,proto3" json:"clientID,omitempty"` // 客户端ID
}

func (x *TaskListRequest) Reset() {
	*x = TaskListRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_common_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TaskListRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TaskListRequest) ProtoMessage() {}

func (x *TaskListRequest) ProtoReflect() protoreflect.Message {
	mi := &file_common_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TaskListRequest.ProtoReflect.Descriptor instead.
func (*TaskListRequest) Descriptor() ([]byte, []int) {
	return file_common_proto_rawDescGZIP(), []int{6}
}

func (x *TaskListRequest) GetClientID() string {
	if x != nil {
		return x.ClientID
	}
	return ""
}

type TaskInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id             string     `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`                             // 任务ID
	Name           string     `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`                         // 任务名称
	Description    string     `protobuf:"bytes,3,opt,name=description,proto3" json:"description,omitempty"`           // 任务描述
	CronExpression string     `protobuf:"bytes,4,opt,name=cronExpression,proto3" json:"cronExpression,omitempty"`     // cron表达式
	ScriptLanguage string     `protobuf:"bytes,5,opt,name=scriptLanguage,proto3" json:"scriptLanguage,omitempty"`     // 脚本语言
	ScriptContent  string     `protobuf:"bytes,6,opt,name=scriptContent,proto3" json:"scriptContent,omitempty"`       // 脚本内容
	Status         TaskStatus `protobuf:"varint,7,opt,name=status,proto3,enum=pb.TaskStatus" json:"status,omitempty"` // 任务状态 0: 未启动 1: 运行中 2: 已停止
}

func (x *TaskInfo) Reset() {
	*x = TaskInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_common_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TaskInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TaskInfo) ProtoMessage() {}

func (x *TaskInfo) ProtoReflect() protoreflect.Message {
	mi := &file_common_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TaskInfo.ProtoReflect.Descriptor instead.
func (*TaskInfo) Descriptor() ([]byte, []int) {
	return file_common_proto_rawDescGZIP(), []int{7}
}

func (x *TaskInfo) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *TaskInfo) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *TaskInfo) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *TaskInfo) GetCronExpression() string {
	if x != nil {
		return x.CronExpression
	}
	return ""
}

func (x *TaskInfo) GetScriptLanguage() string {
	if x != nil {
		return x.ScriptLanguage
	}
	return ""
}

func (x *TaskInfo) GetScriptContent() string {
	if x != nil {
		return x.ScriptContent
	}
	return ""
}

func (x *TaskInfo) GetStatus() TaskStatus {
	if x != nil {
		return x.Status
	}
	return TaskStatus_Unstarted
}

// 开始执行时，调用 TaskComplete 返回任务执行信息和下次执行时间
type TaskCallback struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id                string   `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`                               // 任务ID
	Name              string   `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`                           // 任务名称
	ClientID          string   `protobuf:"bytes,3,opt,name=clientID,proto3" json:"clientID,omitempty"`                   // 客户端ID
	ExecutionID       string   `protobuf:"bytes,4,opt,name=executionID,proto3" json:"executionID,omitempty"`             // 当次执行ID
	NextExecutionTime string   `protobuf:"bytes,5,opt,name=nextExecutionTime,proto3" json:"nextExecutionTime,omitempty"` // 下次执行时间
	Message           string   `protobuf:"bytes,6,opt,name=message,proto3" json:"message,omitempty"`                     // 返回消息
	Code              RES_CODE `protobuf:"varint,7,opt,name=code,proto3,enum=pb.RES_CODE" json:"code,omitempty"`         // 返回码 0: 成功 1: 失败
}

func (x *TaskCallback) Reset() {
	*x = TaskCallback{}
	if protoimpl.UnsafeEnabled {
		mi := &file_common_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TaskCallback) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TaskCallback) ProtoMessage() {}

func (x *TaskCallback) ProtoReflect() protoreflect.Message {
	mi := &file_common_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TaskCallback.ProtoReflect.Descriptor instead.
func (*TaskCallback) Descriptor() ([]byte, []int) {
	return file_common_proto_rawDescGZIP(), []int{8}
}

func (x *TaskCallback) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *TaskCallback) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *TaskCallback) GetClientID() string {
	if x != nil {
		return x.ClientID
	}
	return ""
}

func (x *TaskCallback) GetExecutionID() string {
	if x != nil {
		return x.ExecutionID
	}
	return ""
}

func (x *TaskCallback) GetNextExecutionTime() string {
	if x != nil {
		return x.NextExecutionTime
	}
	return ""
}

func (x *TaskCallback) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *TaskCallback) GetCode() RES_CODE {
	if x != nil {
		return x.Code
	}
	return RES_CODE_SUCCESS
}

type TaskResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Message string      `protobuf:"bytes,1,opt,name=message,proto3" json:"message,omitempty"` // 返回消息
	Tasks   []*TaskInfo `protobuf:"bytes,2,rep,name=tasks,proto3" json:"tasks,omitempty"`     // 任务列表
}

func (x *TaskResponse) Reset() {
	*x = TaskResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_common_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TaskResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TaskResponse) ProtoMessage() {}

func (x *TaskResponse) ProtoReflect() protoreflect.Message {
	mi := &file_common_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TaskResponse.ProtoReflect.Descriptor instead.
func (*TaskResponse) Descriptor() ([]byte, []int) {
	return file_common_proto_rawDescGZIP(), []int{9}
}

func (x *TaskResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *TaskResponse) GetTasks() []*TaskInfo {
	if x != nil {
		return x.Tasks
	}
	return nil
}

type CommandResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Command CommandType `protobuf:"varint,1,opt,name=command,proto3,enum=pb.CommandType" json:"command,omitempty"` // 命令
	Task    *TaskInfo   `protobuf:"bytes,2,opt,name=task,proto3" json:"task,omitempty"`                            // 任务信息
}

func (x *CommandResponse) Reset() {
	*x = CommandResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_common_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CommandResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CommandResponse) ProtoMessage() {}

func (x *CommandResponse) ProtoReflect() protoreflect.Message {
	mi := &file_common_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CommandResponse.ProtoReflect.Descriptor instead.
func (*CommandResponse) Descriptor() ([]byte, []int) {
	return file_common_proto_rawDescGZIP(), []int{10}
}

func (x *CommandResponse) GetCommand() CommandType {
	if x != nil {
		return x.Command
	}
	return CommandType_Start
}

func (x *CommandResponse) GetTask() *TaskInfo {
	if x != nil {
		return x.Task
	}
	return nil
}

type RDBKey struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Key string `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"` // 键
}

func (x *RDBKey) Reset() {
	*x = RDBKey{}
	if protoimpl.UnsafeEnabled {
		mi := &file_common_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RDBKey) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RDBKey) ProtoMessage() {}

func (x *RDBKey) ProtoReflect() protoreflect.Message {
	mi := &file_common_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RDBKey.ProtoReflect.Descriptor instead.
func (*RDBKey) Descriptor() ([]byte, []int) {
	return file_common_proto_rawDescGZIP(), []int{11}
}

func (x *RDBKey) GetKey() string {
	if x != nil {
		return x.Key
	}
	return ""
}

type RDBKeyGet struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Key   string `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`      // 键
	Index int32  `protobuf:"varint,2,opt,name=index,proto3" json:"index,omitempty"` // 索引
}

func (x *RDBKeyGet) Reset() {
	*x = RDBKeyGet{}
	if protoimpl.UnsafeEnabled {
		mi := &file_common_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RDBKeyGet) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RDBKeyGet) ProtoMessage() {}

func (x *RDBKeyGet) ProtoReflect() protoreflect.Message {
	mi := &file_common_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RDBKeyGet.ProtoReflect.Descriptor instead.
func (*RDBKeyGet) Descriptor() ([]byte, []int) {
	return file_common_proto_rawDescGZIP(), []int{12}
}

func (x *RDBKeyGet) GetKey() string {
	if x != nil {
		return x.Key
	}
	return ""
}

func (x *RDBKeyGet) GetIndex() int32 {
	if x != nil {
		return x.Index
	}
	return 0
}

type RDBStartEnd struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Key   string `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`      // 键
	Start int32  `protobuf:"varint,2,opt,name=start,proto3" json:"start,omitempty"` // 开始
	End   int32  `protobuf:"varint,3,opt,name=end,proto3" json:"end,omitempty"`     // 结束
}

func (x *RDBStartEnd) Reset() {
	*x = RDBStartEnd{}
	if protoimpl.UnsafeEnabled {
		mi := &file_common_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RDBStartEnd) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RDBStartEnd) ProtoMessage() {}

func (x *RDBStartEnd) ProtoReflect() protoreflect.Message {
	mi := &file_common_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RDBStartEnd.ProtoReflect.Descriptor instead.
func (*RDBStartEnd) Descriptor() ([]byte, []int) {
	return file_common_proto_rawDescGZIP(), []int{13}
}

func (x *RDBStartEnd) GetKey() string {
	if x != nil {
		return x.Key
	}
	return ""
}

func (x *RDBStartEnd) GetStart() int32 {
	if x != nil {
		return x.Start
	}
	return 0
}

func (x *RDBStartEnd) GetEnd() int32 {
	if x != nil {
		return x.End
	}
	return 0
}

type RDBKVs struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Key    string   `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`       // 键
	Values []string `protobuf:"bytes,2,rep,name=values,proto3" json:"values,omitempty"` // 值
}

func (x *RDBKVs) Reset() {
	*x = RDBKVs{}
	if protoimpl.UnsafeEnabled {
		mi := &file_common_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RDBKVs) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RDBKVs) ProtoMessage() {}

func (x *RDBKVs) ProtoReflect() protoreflect.Message {
	mi := &file_common_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RDBKVs.ProtoReflect.Descriptor instead.
func (*RDBKVs) Descriptor() ([]byte, []int) {
	return file_common_proto_rawDescGZIP(), []int{14}
}

func (x *RDBKVs) GetKey() string {
	if x != nil {
		return x.Key
	}
	return ""
}

func (x *RDBKVs) GetValues() []string {
	if x != nil {
		return x.Values
	}
	return nil
}

type RDBKV struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Key   string `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`     // 键
	Value string `protobuf:"bytes,2,opt,name=value,proto3" json:"value,omitempty"` // 值
}

func (x *RDBKV) Reset() {
	*x = RDBKV{}
	if protoimpl.UnsafeEnabled {
		mi := &file_common_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RDBKV) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RDBKV) ProtoMessage() {}

func (x *RDBKV) ProtoReflect() protoreflect.Message {
	mi := &file_common_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RDBKV.ProtoReflect.Descriptor instead.
func (*RDBKV) Descriptor() ([]byte, []int) {
	return file_common_proto_rawDescGZIP(), []int{15}
}

func (x *RDBKV) GetKey() string {
	if x != nil {
		return x.Key
	}
	return ""
}

func (x *RDBKV) GetValue() string {
	if x != nil {
		return x.Value
	}
	return ""
}

type RDBLen struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Key string `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`  // 键
	Len int32  `protobuf:"varint,2,opt,name=len,proto3" json:"len,omitempty"` // 值
}

func (x *RDBLen) Reset() {
	*x = RDBLen{}
	if protoimpl.UnsafeEnabled {
		mi := &file_common_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RDBLen) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RDBLen) ProtoMessage() {}

func (x *RDBLen) ProtoReflect() protoreflect.Message {
	mi := &file_common_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RDBLen.ProtoReflect.Descriptor instead.
func (*RDBLen) Descriptor() ([]byte, []int) {
	return file_common_proto_rawDescGZIP(), []int{16}
}

func (x *RDBLen) GetKey() string {
	if x != nil {
		return x.Key
	}
	return ""
}

func (x *RDBLen) GetLen() int32 {
	if x != nil {
		return x.Len
	}
	return 0
}

var File_common_proto protoreflect.FileDescriptor

var file_common_proto_rawDesc = []byte{
	0x0a, 0x0c, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x02,
	0x70, 0x62, 0x22, 0x07, 0x0a, 0x05, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x7b, 0x0a, 0x0b, 0x49,
	0x6e, 0x66, 0x6f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x76, 0x65,
	0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x76, 0x65, 0x72,
	0x73, 0x69, 0x6f, 0x6e, 0x12, 0x18, 0x0a, 0x07, 0x61, 0x70, 0x70, 0x4e, 0x61, 0x6d, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x61, 0x70, 0x70, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1c,
	0x0a, 0x09, 0x62, 0x75, 0x69, 0x6c, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x09, 0x62, 0x75, 0x69, 0x6c, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x08,
	0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x49, 0x44, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08,
	0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x49, 0x44, 0x22, 0x2b, 0x0a, 0x0d, 0x43, 0x6c, 0x69, 0x65,
	0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x63, 0x6c, 0x69,
	0x65, 0x6e, 0x74, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x63, 0x6c, 0x69,
	0x65, 0x6e, 0x74, 0x49, 0x44, 0x22, 0x64, 0x0a, 0x0e, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x12, 0x1c, 0x0a, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x12,
	0x1a, 0x0a, 0x08, 0x72, 0x6f, 0x6f, 0x74, 0x50, 0x61, 0x74, 0x68, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x08, 0x72, 0x6f, 0x6f, 0x74, 0x50, 0x61, 0x74, 0x68, 0x22, 0xb8, 0x01, 0x0a, 0x10,
	0x48, 0x65, 0x61, 0x72, 0x74, 0x62, 0x65, 0x61, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x49, 0x44,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x49, 0x44,
	0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x74, 0x69,
	0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x74,
	0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x20, 0x0a, 0x0b, 0x6d, 0x65, 0x6d, 0x6f,
	0x72, 0x79, 0x55, 0x73, 0x61, 0x67, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0b, 0x6d,
	0x65, 0x6d, 0x6f, 0x72, 0x79, 0x55, 0x73, 0x61, 0x67, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x63, 0x70,
	0x75, 0x55, 0x73, 0x61, 0x67, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x02, 0x52, 0x08, 0x63, 0x70,
	0x75, 0x55, 0x73, 0x61, 0x67, 0x65, 0x22, 0x28, 0x0a, 0x0e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x22, 0x2d, 0x0a, 0x0f, 0x54, 0x61, 0x73, 0x6b, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x49, 0x44, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x49, 0x44, 0x22,
	0xee, 0x01, 0x0a, 0x08, 0x54, 0x61, 0x73, 0x6b, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x0e, 0x0a, 0x02,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x26, 0x0a, 0x0e, 0x63, 0x72, 0x6f, 0x6e, 0x45, 0x78, 0x70, 0x72, 0x65, 0x73,
	0x73, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x63, 0x72, 0x6f, 0x6e,
	0x45, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x26, 0x0a, 0x0e, 0x73, 0x63,
	0x72, 0x69, 0x70, 0x74, 0x4c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0e, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x4c, 0x61, 0x6e, 0x67, 0x75, 0x61,
	0x67, 0x65, 0x12, 0x24, 0x0a, 0x0d, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x43, 0x6f, 0x6e, 0x74,
	0x65, 0x6e, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x73, 0x63, 0x72, 0x69, 0x70,
	0x74, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x12, 0x26, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0e, 0x2e, 0x70, 0x62, 0x2e, 0x54, 0x61,
	0x73, 0x6b, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x22, 0xda, 0x01, 0x0a, 0x0c, 0x54, 0x61, 0x73, 0x6b, 0x43, 0x61, 0x6c, 0x6c, 0x62, 0x61, 0x63,
	0x6b, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69,
	0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x49,
	0x44, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x49,
	0x44, 0x12, 0x20, 0x0a, 0x0b, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x44,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f,
	0x6e, 0x49, 0x44, 0x12, 0x2c, 0x0a, 0x11, 0x6e, 0x65, 0x78, 0x74, 0x45, 0x78, 0x65, 0x63, 0x75,
	0x74, 0x69, 0x6f, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11,
	0x6e, 0x65, 0x78, 0x74, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x69, 0x6d,
	0x65, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x20, 0x0a, 0x04, 0x63,
	0x6f, 0x64, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0c, 0x2e, 0x70, 0x62, 0x2e, 0x52,
	0x45, 0x53, 0x5f, 0x43, 0x4f, 0x44, 0x45, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x22, 0x4c, 0x0a,
	0x0c, 0x54, 0x61, 0x73, 0x6b, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x18, 0x0a,
	0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07,
	0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x22, 0x0a, 0x05, 0x74, 0x61, 0x73, 0x6b, 0x73,
	0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x70, 0x62, 0x2e, 0x54, 0x61, 0x73, 0x6b,
	0x49, 0x6e, 0x66, 0x6f, 0x52, 0x05, 0x74, 0x61, 0x73, 0x6b, 0x73, 0x22, 0x5e, 0x0a, 0x0f, 0x43,
	0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x29,
	0x0a, 0x07, 0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x0f, 0x2e, 0x70, 0x62, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x54, 0x79, 0x70, 0x65,
	0x52, 0x07, 0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x12, 0x20, 0x0a, 0x04, 0x74, 0x61, 0x73,
	0x6b, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x70, 0x62, 0x2e, 0x54, 0x61, 0x73,
	0x6b, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x04, 0x74, 0x61, 0x73, 0x6b, 0x22, 0x1a, 0x0a, 0x06, 0x52,
	0x44, 0x42, 0x4b, 0x65, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x22, 0x33, 0x0a, 0x09, 0x52, 0x44, 0x42, 0x4b, 0x65,
	0x79, 0x47, 0x65, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x22, 0x47, 0x0a, 0x0b,
	0x52, 0x44, 0x42, 0x53, 0x74, 0x61, 0x72, 0x74, 0x45, 0x6e, 0x64, 0x12, 0x10, 0x0a, 0x03, 0x6b,
	0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a,
	0x05, 0x73, 0x74, 0x61, 0x72, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x73, 0x74,
	0x61, 0x72, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x65, 0x6e, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x03, 0x65, 0x6e, 0x64, 0x22, 0x32, 0x0a, 0x06, 0x52, 0x44, 0x42, 0x4b, 0x56, 0x73, 0x12,
	0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65,
	0x79, 0x12, 0x16, 0x0a, 0x06, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28,
	0x09, 0x52, 0x06, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x22, 0x2f, 0x0a, 0x05, 0x52, 0x44, 0x42,
	0x4b, 0x56, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x2c, 0x0a, 0x06, 0x52, 0x44,
	0x42, 0x4c, 0x65, 0x6e, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6c, 0x65, 0x6e, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x03, 0x6c, 0x65, 0x6e, 0x2a, 0x35, 0x0a, 0x0a, 0x54, 0x61, 0x73, 0x6b,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x0d, 0x0a, 0x09, 0x55, 0x6e, 0x73, 0x74, 0x61, 0x72,
	0x74, 0x65, 0x64, 0x10, 0x00, 0x12, 0x0b, 0x0a, 0x07, 0x52, 0x75, 0x6e, 0x6e, 0x69, 0x6e, 0x67,
	0x10, 0x01, 0x12, 0x0b, 0x0a, 0x07, 0x53, 0x74, 0x6f, 0x70, 0x70, 0x65, 0x64, 0x10, 0x02, 0x2a,
	0x23, 0x0a, 0x08, 0x52, 0x45, 0x53, 0x5f, 0x43, 0x4f, 0x44, 0x45, 0x12, 0x0b, 0x0a, 0x07, 0x53,
	0x55, 0x43, 0x43, 0x45, 0x53, 0x53, 0x10, 0x00, 0x12, 0x0a, 0x0a, 0x06, 0x46, 0x41, 0x49, 0x4c,
	0x45, 0x44, 0x10, 0x01, 0x2a, 0x2b, 0x0a, 0x0b, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x54,
	0x79, 0x70, 0x65, 0x12, 0x09, 0x0a, 0x05, 0x53, 0x74, 0x61, 0x72, 0x74, 0x10, 0x00, 0x12, 0x08,
	0x0a, 0x04, 0x53, 0x74, 0x6f, 0x70, 0x10, 0x01, 0x12, 0x07, 0x0a, 0x03, 0x52, 0x75, 0x6e, 0x10,
	0x02, 0x32, 0x9f, 0x01, 0x0a, 0x0c, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x48, 0x65, 0x6c, 0x70,
	0x65, 0x72, 0x12, 0x25, 0x0a, 0x04, 0x50, 0x69, 0x6e, 0x67, 0x12, 0x09, 0x2e, 0x70, 0x62, 0x2e,
	0x45, 0x6d, 0x70, 0x74, 0x79, 0x1a, 0x12, 0x2e, 0x70, 0x62, 0x2e, 0x50, 0x75, 0x62, 0x6c, 0x69,
	0x63, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2f, 0x0a, 0x08, 0x52, 0x65, 0x67,
	0x69, 0x73, 0x74, 0x65, 0x72, 0x12, 0x0f, 0x2e, 0x70, 0x62, 0x2e, 0x49, 0x6e, 0x66, 0x6f, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x12, 0x2e, 0x70, 0x62, 0x2e, 0x50, 0x75, 0x62, 0x6c,
	0x69, 0x63, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x37, 0x0a, 0x09, 0x48, 0x65,
	0x61, 0x72, 0x74, 0x62, 0x65, 0x61, 0x74, 0x12, 0x14, 0x2e, 0x70, 0x62, 0x2e, 0x48, 0x65, 0x61,
	0x72, 0x74, 0x62, 0x65, 0x61, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x12, 0x2e,
	0x70, 0x62, 0x2e, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x28, 0x01, 0x32, 0xca, 0x01, 0x0a, 0x0a, 0x48, 0x6f, 0x73, 0x74, 0x48, 0x65, 0x6c, 0x70,
	0x65, 0x72, 0x12, 0x30, 0x0a, 0x07, 0x47, 0x65, 0x74, 0x54, 0x61, 0x73, 0x6b, 0x12, 0x13, 0x2e,
	0x70, 0x62, 0x2e, 0x54, 0x61, 0x73, 0x6b, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x10, 0x2e, 0x70, 0x62, 0x2e, 0x54, 0x61, 0x73, 0x6b, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x33, 0x0a, 0x07, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x12,
	0x11, 0x2e, 0x70, 0x62, 0x2e, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x13, 0x2e, 0x70, 0x62, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x30, 0x01, 0x12, 0x28, 0x0a, 0x09, 0x54, 0x61, 0x73,
	0x6b, 0x53, 0x74, 0x61, 0x72, 0x74, 0x12, 0x10, 0x2e, 0x70, 0x62, 0x2e, 0x54, 0x61, 0x73, 0x6b,
	0x43, 0x61, 0x6c, 0x6c, 0x62, 0x61, 0x63, 0x6b, 0x1a, 0x09, 0x2e, 0x70, 0x62, 0x2e, 0x45, 0x6d,
	0x70, 0x74, 0x79, 0x12, 0x2b, 0x0a, 0x0c, 0x54, 0x61, 0x73, 0x6b, 0x43, 0x6f, 0x6d, 0x70, 0x6c,
	0x65, 0x74, 0x65, 0x12, 0x10, 0x2e, 0x70, 0x62, 0x2e, 0x54, 0x61, 0x73, 0x6b, 0x43, 0x61, 0x6c,
	0x6c, 0x62, 0x61, 0x63, 0x6b, 0x1a, 0x09, 0x2e, 0x70, 0x62, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79,
	0x32, 0xc9, 0x03, 0x0a, 0x09, 0x52, 0x44, 0x42, 0x48, 0x65, 0x6c, 0x70, 0x65, 0x72, 0x12, 0x21,
	0x0a, 0x07, 0x4c, 0x69, 0x73, 0x74, 0x4c, 0x65, 0x6e, 0x12, 0x0a, 0x2e, 0x70, 0x62, 0x2e, 0x52,
	0x44, 0x42, 0x4b, 0x65, 0x79, 0x1a, 0x0a, 0x2e, 0x70, 0x62, 0x2e, 0x52, 0x44, 0x42, 0x4c, 0x65,
	0x6e, 0x12, 0x23, 0x0a, 0x07, 0x4c, 0x69, 0x73, 0x74, 0x47, 0x65, 0x74, 0x12, 0x0d, 0x2e, 0x70,
	0x62, 0x2e, 0x52, 0x44, 0x42, 0x4b, 0x65, 0x79, 0x47, 0x65, 0x74, 0x1a, 0x09, 0x2e, 0x70, 0x62,
	0x2e, 0x52, 0x44, 0x42, 0x4b, 0x56, 0x12, 0x25, 0x0a, 0x0c, 0x4c, 0x69, 0x73, 0x74, 0x50, 0x6f,
	0x70, 0x46, 0x72, 0x6f, 0x6e, 0x74, 0x12, 0x0a, 0x2e, 0x70, 0x62, 0x2e, 0x52, 0x44, 0x42, 0x4b,
	0x65, 0x79, 0x1a, 0x09, 0x2e, 0x70, 0x62, 0x2e, 0x52, 0x44, 0x42, 0x4b, 0x56, 0x12, 0x24, 0x0a,
	0x0b, 0x4c, 0x69, 0x73, 0x74, 0x50, 0x6f, 0x70, 0x42, 0x61, 0x63, 0x6b, 0x12, 0x0a, 0x2e, 0x70,
	0x62, 0x2e, 0x52, 0x44, 0x42, 0x4b, 0x65, 0x79, 0x1a, 0x09, 0x2e, 0x70, 0x62, 0x2e, 0x52, 0x44,
	0x42, 0x4b, 0x56, 0x12, 0x25, 0x0a, 0x0d, 0x4c, 0x69, 0x73, 0x74, 0x50, 0x75, 0x73, 0x68, 0x46,
	0x72, 0x6f, 0x6e, 0x74, 0x12, 0x09, 0x2e, 0x70, 0x62, 0x2e, 0x52, 0x44, 0x42, 0x4b, 0x56, 0x1a,
	0x09, 0x2e, 0x70, 0x62, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x12, 0x24, 0x0a, 0x0c, 0x4c, 0x69,
	0x73, 0x74, 0x50, 0x75, 0x73, 0x68, 0x42, 0x61, 0x63, 0x6b, 0x12, 0x09, 0x2e, 0x70, 0x62, 0x2e,
	0x52, 0x44, 0x42, 0x4b, 0x56, 0x1a, 0x09, 0x2e, 0x70, 0x62, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79,
	0x12, 0x23, 0x0a, 0x0a, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x12, 0x0a,
	0x2e, 0x70, 0x62, 0x2e, 0x52, 0x44, 0x42, 0x4b, 0x65, 0x79, 0x1a, 0x09, 0x2e, 0x70, 0x62, 0x2e,
	0x45, 0x6d, 0x70, 0x74, 0x79, 0x12, 0x28, 0x0a, 0x09, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x61, 0x6e,
	0x67, 0x65, 0x12, 0x0f, 0x2e, 0x70, 0x62, 0x2e, 0x52, 0x44, 0x42, 0x53, 0x74, 0x61, 0x72, 0x74,
	0x45, 0x6e, 0x64, 0x1a, 0x0a, 0x2e, 0x70, 0x62, 0x2e, 0x52, 0x44, 0x42, 0x4b, 0x56, 0x73, 0x12,
	0x26, 0x0a, 0x08, 0x4c, 0x69, 0x73, 0x74, 0x54, 0x72, 0x69, 0x6d, 0x12, 0x0f, 0x2e, 0x70, 0x62,
	0x2e, 0x52, 0x44, 0x42, 0x53, 0x74, 0x61, 0x72, 0x74, 0x45, 0x6e, 0x64, 0x1a, 0x09, 0x2e, 0x70,
	0x62, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x12, 0x1e, 0x0a, 0x06, 0x53, 0x74, 0x72, 0x53, 0x65,
	0x74, 0x12, 0x09, 0x2e, 0x70, 0x62, 0x2e, 0x52, 0x44, 0x42, 0x4b, 0x56, 0x1a, 0x09, 0x2e, 0x70,
	0x62, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x12, 0x1f, 0x0a, 0x06, 0x53, 0x74, 0x72, 0x47, 0x65,
	0x74, 0x12, 0x0a, 0x2e, 0x70, 0x62, 0x2e, 0x52, 0x44, 0x42, 0x4b, 0x65, 0x79, 0x1a, 0x09, 0x2e,
	0x70, 0x62, 0x2e, 0x52, 0x44, 0x42, 0x4b, 0x56, 0x12, 0x22, 0x0a, 0x09, 0x53, 0x74, 0x72, 0x44,
	0x65, 0x6c, 0x65, 0x74, 0x65, 0x12, 0x0a, 0x2e, 0x70, 0x62, 0x2e, 0x52, 0x44, 0x42, 0x4b, 0x65,
	0x79, 0x1a, 0x09, 0x2e, 0x70, 0x62, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x42, 0x05, 0x5a, 0x03,
	0x2f, 0x70, 0x62, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_common_proto_rawDescOnce sync.Once
	file_common_proto_rawDescData = file_common_proto_rawDesc
)

func file_common_proto_rawDescGZIP() []byte {
	file_common_proto_rawDescOnce.Do(func() {
		file_common_proto_rawDescData = protoimpl.X.CompressGZIP(file_common_proto_rawDescData)
	})
	return file_common_proto_rawDescData
}

var file_common_proto_enumTypes = make([]protoimpl.EnumInfo, 3)
var file_common_proto_msgTypes = make([]protoimpl.MessageInfo, 17)
var file_common_proto_goTypes = []interface{}{
	(TaskStatus)(0),          // 0: pb.TaskStatus
	(RES_CODE)(0),            // 1: pb.RES_CODE
	(CommandType)(0),         // 2: pb.CommandType
	(*Empty)(nil),            // 3: pb.Empty
	(*InfoRequest)(nil),      // 4: pb.InfoRequest
	(*ClientRequest)(nil),    // 5: pb.ClientRequest
	(*PublicResponse)(nil),   // 6: pb.PublicResponse
	(*HeartbeatRequest)(nil), // 7: pb.HeartbeatRequest
	(*StatusResponse)(nil),   // 8: pb.StatusResponse
	(*TaskListRequest)(nil),  // 9: pb.TaskListRequest
	(*TaskInfo)(nil),         // 10: pb.TaskInfo
	(*TaskCallback)(nil),     // 11: pb.TaskCallback
	(*TaskResponse)(nil),     // 12: pb.TaskResponse
	(*CommandResponse)(nil),  // 13: pb.CommandResponse
	(*RDBKey)(nil),           // 14: pb.RDBKey
	(*RDBKeyGet)(nil),        // 15: pb.RDBKeyGet
	(*RDBStartEnd)(nil),      // 16: pb.RDBStartEnd
	(*RDBKVs)(nil),           // 17: pb.RDBKVs
	(*RDBKV)(nil),            // 18: pb.RDBKV
	(*RDBLen)(nil),           // 19: pb.RDBLen
}
var file_common_proto_depIdxs = []int32{
	0,  // 0: pb.TaskInfo.status:type_name -> pb.TaskStatus
	1,  // 1: pb.TaskCallback.code:type_name -> pb.RES_CODE
	10, // 2: pb.TaskResponse.tasks:type_name -> pb.TaskInfo
	2,  // 3: pb.CommandResponse.command:type_name -> pb.CommandType
	10, // 4: pb.CommandResponse.task:type_name -> pb.TaskInfo
	3,  // 5: pb.CommonHelper.Ping:input_type -> pb.Empty
	4,  // 6: pb.CommonHelper.Register:input_type -> pb.InfoRequest
	7,  // 7: pb.CommonHelper.Heartbeat:input_type -> pb.HeartbeatRequest
	9,  // 8: pb.HostHelper.GetTask:input_type -> pb.TaskListRequest
	5,  // 9: pb.HostHelper.Command:input_type -> pb.ClientRequest
	11, // 10: pb.HostHelper.TaskStart:input_type -> pb.TaskCallback
	11, // 11: pb.HostHelper.TaskComplete:input_type -> pb.TaskCallback
	14, // 12: pb.RDBHelper.ListLen:input_type -> pb.RDBKey
	15, // 13: pb.RDBHelper.ListGet:input_type -> pb.RDBKeyGet
	14, // 14: pb.RDBHelper.ListPopFront:input_type -> pb.RDBKey
	14, // 15: pb.RDBHelper.ListPopBack:input_type -> pb.RDBKey
	18, // 16: pb.RDBHelper.ListPushFront:input_type -> pb.RDBKV
	18, // 17: pb.RDBHelper.ListPushBack:input_type -> pb.RDBKV
	14, // 18: pb.RDBHelper.ListRemove:input_type -> pb.RDBKey
	16, // 19: pb.RDBHelper.ListRange:input_type -> pb.RDBStartEnd
	16, // 20: pb.RDBHelper.ListTrim:input_type -> pb.RDBStartEnd
	18, // 21: pb.RDBHelper.StrSet:input_type -> pb.RDBKV
	14, // 22: pb.RDBHelper.StrGet:input_type -> pb.RDBKey
	14, // 23: pb.RDBHelper.StrDelete:input_type -> pb.RDBKey
	6,  // 24: pb.CommonHelper.Ping:output_type -> pb.PublicResponse
	6,  // 25: pb.CommonHelper.Register:output_type -> pb.PublicResponse
	6,  // 26: pb.CommonHelper.Heartbeat:output_type -> pb.PublicResponse
	12, // 27: pb.HostHelper.GetTask:output_type -> pb.TaskResponse
	13, // 28: pb.HostHelper.Command:output_type -> pb.CommandResponse
	3,  // 29: pb.HostHelper.TaskStart:output_type -> pb.Empty
	3,  // 30: pb.HostHelper.TaskComplete:output_type -> pb.Empty
	19, // 31: pb.RDBHelper.ListLen:output_type -> pb.RDBLen
	18, // 32: pb.RDBHelper.ListGet:output_type -> pb.RDBKV
	18, // 33: pb.RDBHelper.ListPopFront:output_type -> pb.RDBKV
	18, // 34: pb.RDBHelper.ListPopBack:output_type -> pb.RDBKV
	3,  // 35: pb.RDBHelper.ListPushFront:output_type -> pb.Empty
	3,  // 36: pb.RDBHelper.ListPushBack:output_type -> pb.Empty
	3,  // 37: pb.RDBHelper.ListRemove:output_type -> pb.Empty
	17, // 38: pb.RDBHelper.ListRange:output_type -> pb.RDBKVs
	3,  // 39: pb.RDBHelper.ListTrim:output_type -> pb.Empty
	3,  // 40: pb.RDBHelper.StrSet:output_type -> pb.Empty
	18, // 41: pb.RDBHelper.StrGet:output_type -> pb.RDBKV
	3,  // 42: pb.RDBHelper.StrDelete:output_type -> pb.Empty
	24, // [24:43] is the sub-list for method output_type
	5,  // [5:24] is the sub-list for method input_type
	5,  // [5:5] is the sub-list for extension type_name
	5,  // [5:5] is the sub-list for extension extendee
	0,  // [0:5] is the sub-list for field type_name
}

func init() { file_common_proto_init() }
func file_common_proto_init() {
	if File_common_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_common_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Empty); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_common_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*InfoRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_common_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ClientRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_common_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PublicResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_common_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HeartbeatRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_common_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StatusResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_common_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TaskListRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_common_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TaskInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_common_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TaskCallback); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_common_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TaskResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_common_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CommandResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_common_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RDBKey); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_common_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RDBKeyGet); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_common_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RDBStartEnd); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_common_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RDBKVs); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_common_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RDBKV); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_common_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RDBLen); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_common_proto_rawDesc,
			NumEnums:      3,
			NumMessages:   17,
			NumExtensions: 0,
			NumServices:   3,
		},
		GoTypes:           file_common_proto_goTypes,
		DependencyIndexes: file_common_proto_depIdxs,
		EnumInfos:         file_common_proto_enumTypes,
		MessageInfos:      file_common_proto_msgTypes,
	}.Build()
	File_common_proto = out.File
	file_common_proto_rawDesc = nil
	file_common_proto_goTypes = nil
	file_common_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// CommonHelperClient is the client API for CommonHelper service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type CommonHelperClient interface {
	// 测试网络
	Ping(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*PublicResponse, error)
	// 获取插件信息
	Register(ctx context.Context, in *InfoRequest, opts ...grpc.CallOption) (*PublicResponse, error)
	// 心跳检测
	Heartbeat(ctx context.Context, opts ...grpc.CallOption) (CommonHelper_HeartbeatClient, error)
}

type commonHelperClient struct {
	cc grpc.ClientConnInterface
}

func NewCommonHelperClient(cc grpc.ClientConnInterface) CommonHelperClient {
	return &commonHelperClient{cc}
}

func (c *commonHelperClient) Ping(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*PublicResponse, error) {
	out := new(PublicResponse)
	err := c.cc.Invoke(ctx, "/pb.CommonHelper/Ping", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *commonHelperClient) Register(ctx context.Context, in *InfoRequest, opts ...grpc.CallOption) (*PublicResponse, error) {
	out := new(PublicResponse)
	err := c.cc.Invoke(ctx, "/pb.CommonHelper/Register", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *commonHelperClient) Heartbeat(ctx context.Context, opts ...grpc.CallOption) (CommonHelper_HeartbeatClient, error) {
	stream, err := c.cc.NewStream(ctx, &_CommonHelper_serviceDesc.Streams[0], "/pb.CommonHelper/Heartbeat", opts...)
	if err != nil {
		return nil, err
	}
	x := &commonHelperHeartbeatClient{stream}
	return x, nil
}

type CommonHelper_HeartbeatClient interface {
	Send(*HeartbeatRequest) error
	CloseAndRecv() (*PublicResponse, error)
	grpc.ClientStream
}

type commonHelperHeartbeatClient struct {
	grpc.ClientStream
}

func (x *commonHelperHeartbeatClient) Send(m *HeartbeatRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *commonHelperHeartbeatClient) CloseAndRecv() (*PublicResponse, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(PublicResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// CommonHelperServer is the server API for CommonHelper service.
type CommonHelperServer interface {
	// 测试网络
	Ping(context.Context, *Empty) (*PublicResponse, error)
	// 获取插件信息
	Register(context.Context, *InfoRequest) (*PublicResponse, error)
	// 心跳检测
	Heartbeat(CommonHelper_HeartbeatServer) error
}

// UnimplementedCommonHelperServer can be embedded to have forward compatible implementations.
type UnimplementedCommonHelperServer struct {
}

func (*UnimplementedCommonHelperServer) Ping(context.Context, *Empty) (*PublicResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Ping not implemented")
}
func (*UnimplementedCommonHelperServer) Register(context.Context, *InfoRequest) (*PublicResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Register not implemented")
}
func (*UnimplementedCommonHelperServer) Heartbeat(CommonHelper_HeartbeatServer) error {
	return status.Errorf(codes.Unimplemented, "method Heartbeat not implemented")
}

func RegisterCommonHelperServer(s *grpc.Server, srv CommonHelperServer) {
	s.RegisterService(&_CommonHelper_serviceDesc, srv)
}

func _CommonHelper_Ping_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CommonHelperServer).Ping(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.CommonHelper/Ping",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CommonHelperServer).Ping(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _CommonHelper_Register_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(InfoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CommonHelperServer).Register(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.CommonHelper/Register",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CommonHelperServer).Register(ctx, req.(*InfoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CommonHelper_Heartbeat_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(CommonHelperServer).Heartbeat(&commonHelperHeartbeatServer{stream})
}

type CommonHelper_HeartbeatServer interface {
	SendAndClose(*PublicResponse) error
	Recv() (*HeartbeatRequest, error)
	grpc.ServerStream
}

type commonHelperHeartbeatServer struct {
	grpc.ServerStream
}

func (x *commonHelperHeartbeatServer) SendAndClose(m *PublicResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *commonHelperHeartbeatServer) Recv() (*HeartbeatRequest, error) {
	m := new(HeartbeatRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

var _CommonHelper_serviceDesc = grpc.ServiceDesc{
	ServiceName: "pb.CommonHelper",
	HandlerType: (*CommonHelperServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Ping",
			Handler:    _CommonHelper_Ping_Handler,
		},
		{
			MethodName: "Register",
			Handler:    _CommonHelper_Register_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Heartbeat",
			Handler:       _CommonHelper_Heartbeat_Handler,
			ClientStreams: true,
		},
	},
	Metadata: "common.proto",
}

// HostHelperClient is the client API for HostHelper service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type HostHelperClient interface {
	// 获取任务列表
	GetTask(ctx context.Context, in *TaskListRequest, opts ...grpc.CallOption) (*TaskResponse, error)
	// 管理端给客户端发送命令 启动/停止/运行 任务
	Command(ctx context.Context, in *ClientRequest, opts ...grpc.CallOption) (HostHelper_CommandClient, error)
	// 客户端在启动任务之后，就会向管理端发送任务启动消息
	TaskStart(ctx context.Context, in *TaskCallback, opts ...grpc.CallOption) (*Empty, error)
	// 客户端在之后完任务之后，就会向管理端发送任务完成消息
	TaskComplete(ctx context.Context, in *TaskCallback, opts ...grpc.CallOption) (*Empty, error)
}

type hostHelperClient struct {
	cc grpc.ClientConnInterface
}

func NewHostHelperClient(cc grpc.ClientConnInterface) HostHelperClient {
	return &hostHelperClient{cc}
}

func (c *hostHelperClient) GetTask(ctx context.Context, in *TaskListRequest, opts ...grpc.CallOption) (*TaskResponse, error) {
	out := new(TaskResponse)
	err := c.cc.Invoke(ctx, "/pb.HostHelper/GetTask", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hostHelperClient) Command(ctx context.Context, in *ClientRequest, opts ...grpc.CallOption) (HostHelper_CommandClient, error) {
	stream, err := c.cc.NewStream(ctx, &_HostHelper_serviceDesc.Streams[0], "/pb.HostHelper/Command", opts...)
	if err != nil {
		return nil, err
	}
	x := &hostHelperCommandClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type HostHelper_CommandClient interface {
	Recv() (*CommandResponse, error)
	grpc.ClientStream
}

type hostHelperCommandClient struct {
	grpc.ClientStream
}

func (x *hostHelperCommandClient) Recv() (*CommandResponse, error) {
	m := new(CommandResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *hostHelperClient) TaskStart(ctx context.Context, in *TaskCallback, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/pb.HostHelper/TaskStart", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hostHelperClient) TaskComplete(ctx context.Context, in *TaskCallback, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/pb.HostHelper/TaskComplete", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// HostHelperServer is the server API for HostHelper service.
type HostHelperServer interface {
	// 获取任务列表
	GetTask(context.Context, *TaskListRequest) (*TaskResponse, error)
	// 管理端给客户端发送命令 启动/停止/运行 任务
	Command(*ClientRequest, HostHelper_CommandServer) error
	// 客户端在启动任务之后，就会向管理端发送任务启动消息
	TaskStart(context.Context, *TaskCallback) (*Empty, error)
	// 客户端在之后完任务之后，就会向管理端发送任务完成消息
	TaskComplete(context.Context, *TaskCallback) (*Empty, error)
}

// UnimplementedHostHelperServer can be embedded to have forward compatible implementations.
type UnimplementedHostHelperServer struct {
}

func (*UnimplementedHostHelperServer) GetTask(context.Context, *TaskListRequest) (*TaskResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTask not implemented")
}
func (*UnimplementedHostHelperServer) Command(*ClientRequest, HostHelper_CommandServer) error {
	return status.Errorf(codes.Unimplemented, "method Command not implemented")
}
func (*UnimplementedHostHelperServer) TaskStart(context.Context, *TaskCallback) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TaskStart not implemented")
}
func (*UnimplementedHostHelperServer) TaskComplete(context.Context, *TaskCallback) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TaskComplete not implemented")
}

func RegisterHostHelperServer(s *grpc.Server, srv HostHelperServer) {
	s.RegisterService(&_HostHelper_serviceDesc, srv)
}

func _HostHelper_GetTask_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TaskListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HostHelperServer).GetTask(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.HostHelper/GetTask",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HostHelperServer).GetTask(ctx, req.(*TaskListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _HostHelper_Command_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(ClientRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(HostHelperServer).Command(m, &hostHelperCommandServer{stream})
}

type HostHelper_CommandServer interface {
	Send(*CommandResponse) error
	grpc.ServerStream
}

type hostHelperCommandServer struct {
	grpc.ServerStream
}

func (x *hostHelperCommandServer) Send(m *CommandResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _HostHelper_TaskStart_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TaskCallback)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HostHelperServer).TaskStart(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.HostHelper/TaskStart",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HostHelperServer).TaskStart(ctx, req.(*TaskCallback))
	}
	return interceptor(ctx, in, info, handler)
}

func _HostHelper_TaskComplete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TaskCallback)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HostHelperServer).TaskComplete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.HostHelper/TaskComplete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HostHelperServer).TaskComplete(ctx, req.(*TaskCallback))
	}
	return interceptor(ctx, in, info, handler)
}

var _HostHelper_serviceDesc = grpc.ServiceDesc{
	ServiceName: "pb.HostHelper",
	HandlerType: (*HostHelperServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetTask",
			Handler:    _HostHelper_GetTask_Handler,
		},
		{
			MethodName: "TaskStart",
			Handler:    _HostHelper_TaskStart_Handler,
		},
		{
			MethodName: "TaskComplete",
			Handler:    _HostHelper_TaskComplete_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Command",
			Handler:       _HostHelper_Command_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "common.proto",
}

// RDBHelperClient is the client API for RDBHelper service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type RDBHelperClient interface {
	ListLen(ctx context.Context, in *RDBKey, opts ...grpc.CallOption) (*RDBLen, error)
	ListGet(ctx context.Context, in *RDBKeyGet, opts ...grpc.CallOption) (*RDBKV, error)
	ListPopFront(ctx context.Context, in *RDBKey, opts ...grpc.CallOption) (*RDBKV, error)
	ListPopBack(ctx context.Context, in *RDBKey, opts ...grpc.CallOption) (*RDBKV, error)
	ListPushFront(ctx context.Context, in *RDBKV, opts ...grpc.CallOption) (*Empty, error)
	ListPushBack(ctx context.Context, in *RDBKV, opts ...grpc.CallOption) (*Empty, error)
	ListRemove(ctx context.Context, in *RDBKey, opts ...grpc.CallOption) (*Empty, error)
	ListRange(ctx context.Context, in *RDBStartEnd, opts ...grpc.CallOption) (*RDBKVs, error)
	ListTrim(ctx context.Context, in *RDBStartEnd, opts ...grpc.CallOption) (*Empty, error)
	StrSet(ctx context.Context, in *RDBKV, opts ...grpc.CallOption) (*Empty, error)
	StrGet(ctx context.Context, in *RDBKey, opts ...grpc.CallOption) (*RDBKV, error)
	StrDelete(ctx context.Context, in *RDBKey, opts ...grpc.CallOption) (*Empty, error)
}

type rDBHelperClient struct {
	cc grpc.ClientConnInterface
}

func NewRDBHelperClient(cc grpc.ClientConnInterface) RDBHelperClient {
	return &rDBHelperClient{cc}
}

func (c *rDBHelperClient) ListLen(ctx context.Context, in *RDBKey, opts ...grpc.CallOption) (*RDBLen, error) {
	out := new(RDBLen)
	err := c.cc.Invoke(ctx, "/pb.RDBHelper/ListLen", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rDBHelperClient) ListGet(ctx context.Context, in *RDBKeyGet, opts ...grpc.CallOption) (*RDBKV, error) {
	out := new(RDBKV)
	err := c.cc.Invoke(ctx, "/pb.RDBHelper/ListGet", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rDBHelperClient) ListPopFront(ctx context.Context, in *RDBKey, opts ...grpc.CallOption) (*RDBKV, error) {
	out := new(RDBKV)
	err := c.cc.Invoke(ctx, "/pb.RDBHelper/ListPopFront", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rDBHelperClient) ListPopBack(ctx context.Context, in *RDBKey, opts ...grpc.CallOption) (*RDBKV, error) {
	out := new(RDBKV)
	err := c.cc.Invoke(ctx, "/pb.RDBHelper/ListPopBack", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rDBHelperClient) ListPushFront(ctx context.Context, in *RDBKV, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/pb.RDBHelper/ListPushFront", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rDBHelperClient) ListPushBack(ctx context.Context, in *RDBKV, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/pb.RDBHelper/ListPushBack", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rDBHelperClient) ListRemove(ctx context.Context, in *RDBKey, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/pb.RDBHelper/ListRemove", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rDBHelperClient) ListRange(ctx context.Context, in *RDBStartEnd, opts ...grpc.CallOption) (*RDBKVs, error) {
	out := new(RDBKVs)
	err := c.cc.Invoke(ctx, "/pb.RDBHelper/ListRange", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rDBHelperClient) ListTrim(ctx context.Context, in *RDBStartEnd, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/pb.RDBHelper/ListTrim", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rDBHelperClient) StrSet(ctx context.Context, in *RDBKV, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/pb.RDBHelper/StrSet", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rDBHelperClient) StrGet(ctx context.Context, in *RDBKey, opts ...grpc.CallOption) (*RDBKV, error) {
	out := new(RDBKV)
	err := c.cc.Invoke(ctx, "/pb.RDBHelper/StrGet", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rDBHelperClient) StrDelete(ctx context.Context, in *RDBKey, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/pb.RDBHelper/StrDelete", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// RDBHelperServer is the server API for RDBHelper service.
type RDBHelperServer interface {
	ListLen(context.Context, *RDBKey) (*RDBLen, error)
	ListGet(context.Context, *RDBKeyGet) (*RDBKV, error)
	ListPopFront(context.Context, *RDBKey) (*RDBKV, error)
	ListPopBack(context.Context, *RDBKey) (*RDBKV, error)
	ListPushFront(context.Context, *RDBKV) (*Empty, error)
	ListPushBack(context.Context, *RDBKV) (*Empty, error)
	ListRemove(context.Context, *RDBKey) (*Empty, error)
	ListRange(context.Context, *RDBStartEnd) (*RDBKVs, error)
	ListTrim(context.Context, *RDBStartEnd) (*Empty, error)
	StrSet(context.Context, *RDBKV) (*Empty, error)
	StrGet(context.Context, *RDBKey) (*RDBKV, error)
	StrDelete(context.Context, *RDBKey) (*Empty, error)
}

// UnimplementedRDBHelperServer can be embedded to have forward compatible implementations.
type UnimplementedRDBHelperServer struct {
}

func (*UnimplementedRDBHelperServer) ListLen(context.Context, *RDBKey) (*RDBLen, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListLen not implemented")
}
func (*UnimplementedRDBHelperServer) ListGet(context.Context, *RDBKeyGet) (*RDBKV, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListGet not implemented")
}
func (*UnimplementedRDBHelperServer) ListPopFront(context.Context, *RDBKey) (*RDBKV, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListPopFront not implemented")
}
func (*UnimplementedRDBHelperServer) ListPopBack(context.Context, *RDBKey) (*RDBKV, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListPopBack not implemented")
}
func (*UnimplementedRDBHelperServer) ListPushFront(context.Context, *RDBKV) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListPushFront not implemented")
}
func (*UnimplementedRDBHelperServer) ListPushBack(context.Context, *RDBKV) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListPushBack not implemented")
}
func (*UnimplementedRDBHelperServer) ListRemove(context.Context, *RDBKey) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListRemove not implemented")
}
func (*UnimplementedRDBHelperServer) ListRange(context.Context, *RDBStartEnd) (*RDBKVs, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListRange not implemented")
}
func (*UnimplementedRDBHelperServer) ListTrim(context.Context, *RDBStartEnd) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListTrim not implemented")
}
func (*UnimplementedRDBHelperServer) StrSet(context.Context, *RDBKV) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StrSet not implemented")
}
func (*UnimplementedRDBHelperServer) StrGet(context.Context, *RDBKey) (*RDBKV, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StrGet not implemented")
}
func (*UnimplementedRDBHelperServer) StrDelete(context.Context, *RDBKey) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StrDelete not implemented")
}

func RegisterRDBHelperServer(s *grpc.Server, srv RDBHelperServer) {
	s.RegisterService(&_RDBHelper_serviceDesc, srv)
}

func _RDBHelper_ListLen_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RDBKey)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RDBHelperServer).ListLen(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.RDBHelper/ListLen",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RDBHelperServer).ListLen(ctx, req.(*RDBKey))
	}
	return interceptor(ctx, in, info, handler)
}

func _RDBHelper_ListGet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RDBKeyGet)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RDBHelperServer).ListGet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.RDBHelper/ListGet",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RDBHelperServer).ListGet(ctx, req.(*RDBKeyGet))
	}
	return interceptor(ctx, in, info, handler)
}

func _RDBHelper_ListPopFront_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RDBKey)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RDBHelperServer).ListPopFront(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.RDBHelper/ListPopFront",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RDBHelperServer).ListPopFront(ctx, req.(*RDBKey))
	}
	return interceptor(ctx, in, info, handler)
}

func _RDBHelper_ListPopBack_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RDBKey)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RDBHelperServer).ListPopBack(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.RDBHelper/ListPopBack",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RDBHelperServer).ListPopBack(ctx, req.(*RDBKey))
	}
	return interceptor(ctx, in, info, handler)
}

func _RDBHelper_ListPushFront_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RDBKV)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RDBHelperServer).ListPushFront(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.RDBHelper/ListPushFront",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RDBHelperServer).ListPushFront(ctx, req.(*RDBKV))
	}
	return interceptor(ctx, in, info, handler)
}

func _RDBHelper_ListPushBack_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RDBKV)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RDBHelperServer).ListPushBack(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.RDBHelper/ListPushBack",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RDBHelperServer).ListPushBack(ctx, req.(*RDBKV))
	}
	return interceptor(ctx, in, info, handler)
}

func _RDBHelper_ListRemove_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RDBKey)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RDBHelperServer).ListRemove(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.RDBHelper/ListRemove",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RDBHelperServer).ListRemove(ctx, req.(*RDBKey))
	}
	return interceptor(ctx, in, info, handler)
}

func _RDBHelper_ListRange_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RDBStartEnd)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RDBHelperServer).ListRange(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.RDBHelper/ListRange",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RDBHelperServer).ListRange(ctx, req.(*RDBStartEnd))
	}
	return interceptor(ctx, in, info, handler)
}

func _RDBHelper_ListTrim_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RDBStartEnd)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RDBHelperServer).ListTrim(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.RDBHelper/ListTrim",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RDBHelperServer).ListTrim(ctx, req.(*RDBStartEnd))
	}
	return interceptor(ctx, in, info, handler)
}

func _RDBHelper_StrSet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RDBKV)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RDBHelperServer).StrSet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.RDBHelper/StrSet",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RDBHelperServer).StrSet(ctx, req.(*RDBKV))
	}
	return interceptor(ctx, in, info, handler)
}

func _RDBHelper_StrGet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RDBKey)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RDBHelperServer).StrGet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.RDBHelper/StrGet",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RDBHelperServer).StrGet(ctx, req.(*RDBKey))
	}
	return interceptor(ctx, in, info, handler)
}

func _RDBHelper_StrDelete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RDBKey)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RDBHelperServer).StrDelete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.RDBHelper/StrDelete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RDBHelperServer).StrDelete(ctx, req.(*RDBKey))
	}
	return interceptor(ctx, in, info, handler)
}

var _RDBHelper_serviceDesc = grpc.ServiceDesc{
	ServiceName: "pb.RDBHelper",
	HandlerType: (*RDBHelperServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ListLen",
			Handler:    _RDBHelper_ListLen_Handler,
		},
		{
			MethodName: "ListGet",
			Handler:    _RDBHelper_ListGet_Handler,
		},
		{
			MethodName: "ListPopFront",
			Handler:    _RDBHelper_ListPopFront_Handler,
		},
		{
			MethodName: "ListPopBack",
			Handler:    _RDBHelper_ListPopBack_Handler,
		},
		{
			MethodName: "ListPushFront",
			Handler:    _RDBHelper_ListPushFront_Handler,
		},
		{
			MethodName: "ListPushBack",
			Handler:    _RDBHelper_ListPushBack_Handler,
		},
		{
			MethodName: "ListRemove",
			Handler:    _RDBHelper_ListRemove_Handler,
		},
		{
			MethodName: "ListRange",
			Handler:    _RDBHelper_ListRange_Handler,
		},
		{
			MethodName: "ListTrim",
			Handler:    _RDBHelper_ListTrim_Handler,
		},
		{
			MethodName: "StrSet",
			Handler:    _RDBHelper_StrSet_Handler,
		},
		{
			MethodName: "StrGet",
			Handler:    _RDBHelper_StrGet_Handler,
		},
		{
			MethodName: "StrDelete",
			Handler:    _RDBHelper_StrDelete_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "common.proto",
}
