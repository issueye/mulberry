// 指定proto版本
syntax = "proto3";
// 指定默认包名
package pb;
// 指定golang包名
option go_package = "/pb";

message Empty {}

// 插件信息
message InfoRequest {
    string version =        1;      // 版本号
    string appName =        2;      // 程序名称
    string buildTime =      3;      // 构建时间
    string clientID =       4;      // 客户端ID
}

message ClientRequest {
    string clientID =       2;       // 客户端ID
}

// 网络检查
message PublicResponse {
    string message =        1;      // 返回消息
    int64 timestamp =       2;      // 时间戳 返回当前服务的时间戳
    string rootPath =       3;      // 根路径
} 

// 心跳检测
message HeartbeatRequest {
    string name =           1;       // 名称
    string clientID =       2;       // 客户端ID
    string message =        3;       // 返回消息
    int64 timestamp =       4;       // 时间戳
    float memoryUsage =     5;       // 内存使用情况
    float cpuUsage =        6;       // CPU使用情况
}

// 状态返回
message StatusResponse {
    string status =         1;      // 状态
}

// 公共服务
service CommonHelper {
    // 测试网络
    rpc Ping(Empty) returns (PublicResponse);
    // 获取插件信息
    rpc Register (InfoRequest) returns (PublicResponse);
    // 心跳检测
    rpc Heartbeat(stream HeartbeatRequest) returns (PublicResponse);
}


message TaskListRequest {
    string clientID =         1;      // 客户端ID
}

enum TaskStatus {
    Unstarted = 0;      // 未启动
    Running = 1;        // 运行中
    Stopped = 2;        // 已停止
}

message TaskInfo {
    string id =                     1;              // 任务ID
    string name =                   2;              // 任务名称
    string description =            3;              // 任务描述
    string cronExpression =         4;              // cron表达式
    string scriptLanguage =         5;              // 脚本语言
    string scriptContent =          6;              // 脚本内容
    TaskStatus status =             7;              // 任务状态 0: 未启动 1: 运行中 2: 已停止
}

enum RES_CODE {
    SUCCESS = 0;        // 成功
    FAILED = 1;         // 失败
}

// 开始执行时，调用 TaskComplete 返回任务执行信息和下次执行时间
message TaskCallback {
    string id =                     1;              // 任务ID
    string name =                   2;              // 任务名称
    string clientID =               3;              // 客户端ID
    string executionID =            4;              // 当次执行ID
    string nextExecutionTime =      5;              // 下次执行时间
    string message =                6;              // 返回消息
    RES_CODE code =                 7;              // 返回码 0: 成功 1: 失败
}

message TaskResponse {
    string message =            1;    // 返回消息
    repeated TaskInfo tasks =   2;    // 任务列表
}

enum CommandType {
    Start = 0;      // 启动
    Stop = 1;       // 停止
    Run = 2;        // 运行
}

message CommandResponse {
    CommandType command =           1;      // 命令
    TaskInfo task =                 2;      // 任务信息
}

// 宿主为插件提供的服务
service HostHelper {
    // 获取任务列表
    rpc GetTask(TaskListRequest) returns (TaskResponse);
    // 管理端给客户端发送命令 启动/停止/运行 任务
    rpc Command(ClientRequest) returns (stream CommandResponse);
    // 客户端在启动任务之后，就会向管理端发送任务启动消息
    rpc TaskStart(TaskCallback) returns (Empty);
    // 客户端在之后完任务之后，就会向管理端发送任务完成消息
    rpc TaskComplete(TaskCallback) returns (Empty);
}

message RDBKey {
    string key =                 1;    // 键
}

message RDBKeyGet {
    string key =                 1;    // 键
    int32 index =                2;    // 索引
}

message RDBStartEnd  {
    string key =                 1;    // 键
    int32 start =                2;    // 开始
    int32 end =                 3;    // 结束
}

message RDBKVs {
    string key =                 1;    // 键
    repeated string values =     2;    // 值
}

message RDBKV {
    string key =                 1;    // 键
    string value =               2;    // 值
}

message RDBLen {
    string key =                 1;    // 键
    int32 len =                  2;    // 值
}

service RDBHelper {
    rpc ListLen(RDBKey) returns (RDBLen);                       // 获取列表长度
    rpc ListGet(RDBKeyGet) returns (RDBKV);                     // 获取列表值
    rpc ListPopFront(RDBKey) returns (RDBKV);                   // 从列表头部弹出一个值
    rpc ListPopBack(RDBKey) returns (RDBKV);                    // 从列表尾部弹出一个值
    rpc ListPushFront(RDBKV) returns (Empty);                   // 从列表头部插入一个值
    rpc ListPushBack(RDBKV) returns (Empty);                    // 从列表尾部插入一个值
    rpc ListRemove(RDBKey) returns (Empty);                     // 从列表中移除一个值
    rpc ListRange(RDBStartEnd) returns (RDBKVs);                // 获取列表中指定范围的值
    rpc ListTrim(RDBStartEnd) returns (Empty);                  // 修剪列表指定范围的值

    rpc StrSet(RDBKV) returns (Empty);                          // 设置键值
    rpc StrGet(RDBKey) returns (RDBKV);                         // 获取键值
    rpc StrDelete(RDBKey) returns (Empty);                      // 删除键值
}
